---
title: GIT
format:
  revealjs:
    transition: slide
    slide-number: true
    code-background: true
    # logo: ../../static/logos.png
    # footer: "[Generic Software Skills](../../index.html) | [CC-BY 4.0](https://creativecommons.org/licenses/by/4.0/)"
    theme: [default, custom.scss]
    chalkboard:
      buttons: true
    navigation-mode: linear
    auto-stretch: true
    center: true
    mermaid:
      theme: default

execute:
  cache: true
---
  
# What is GIT ?

## Version Control System
- Manage a sequence of snapshots
- Provide tools to handle changes 
- Provide tools for collaboration 



## Why version control ? 
- Exchange
- Collaboration 
- Storing version 
- Tracking 
- Backup 




## Git
There are many version control systems out there (e.g. Subversion, CVS, Mercurial). We will focus on [Git](http://git-scm.com) which is the **de facto standard**

![](https://git-scm.com/images/logos/downloads/Git-Logo-2Color.svg "Git logo"){height=10%}


# Using the terminal

## Terminal
Interface between the user and the computer 
![](terminal.png){width=80%}

Equivalent to a **G**raphical **U**ser **I**nterface (**GUI**)

. . .

But more powerfull

## More powerfull ? 
- **all** tasks faster on the CPU side (not necessarly on human side)
- finer control in the interaction with the computer
- repated tasks can be automated

## Example
Find and rename all files which are of type `.nc`

:::: {.columns} 

::: {.column width="20%"}

Task

Find

Rename
:::

::: {.column width="40%"}
GUI

easy

teadious
:::

::: {.column width="40%"}
Terminal

easy 

easy 
:::


::::

``` {.sh}
find . -name "*.nc" -exec mv {} right_name{} \;
```

. . .

You can get GitHub Copilot/ChatGPT/... to write the command for you

. . .

❗️But you should understand what the command does❗️




## Terminal

Alot of tools interacting with the terminal but for us most interasting are `Git` and `python` 

## Some basic commands

:::{.fragment fragment-index=0}
`c`hange `d`irectory
```{sh}
cd path/to/directory
```
:::

:::{.fragment fragment-index=1}
`l`i`s`t files
```{sh}
ls
```
:::

:::{.fragment fragment-index=2}
`m`a`k`e `dir`ectory
```{sh}
mkdir directory_name
```
:::

:::{.fragment fragment-index=3}
create a file
```{sh}
touch hello.txt
```
:::


# Using Git





## As easy as **1, 2, 3**
```{.bash code-line-numbers="3-5"}
mkdir my_repo
cd my_repo
git init .  # Initialize a repository
git add .  # Add the whole directory content (don't do that)
git commit -m "Initial commit"  # Commit your changes
```

```{mermaid}
gitGraph
   commit id: "df21a: Initial commit"
```

## Sequence of snapshots

Commits are linked to form a sequence of snapshots:

```bash
echo "hello" > world.txt
git add world.txt
git commit -m "add world"
```

```{mermaid}
gitGraph
   commit id: "df21a: Initial commit"
   commit id: "315f2: add world"
```
## The basic workflow

* Git offers plenty of functionality that is extensively documented

* You will only need a **handful of commands** in your day to day work:

  ```bash
  git status  # show which files have changed
  git diff my_file  # show what has changed
  git add my_file  # stage changes
  git commit  # commit your changes
   ```


## Configuration

* Each commit is attributed to an author

* The concept or authorship is heavily used on other platforms (e.g. GitLab)

```bash
git config --global user.name "Your Name"
git config --global user.email "youremail@yourdomain.com"
```


# Branches










## Solving conflicts {auto-animate=true .leftalign}

Solving conflicts requires **your decision**
   
```{.raw filename=file.txt}
<<<<<<< HEAD
This course is nice!
=======
This course is awesome!
>>>>>>> bob
```

## Solving conflicts {auto-animate=true visibility="uncounted" .leftalign}

Solving conflicts requires **your decision**

```{.raw filename=file.txt}
This course is awesome! 
```

:::{.fragment}
After resolving the conflict, you have to commit your changes
```{sh}
git add file.txt
git commit
```
:::